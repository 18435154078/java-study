内部类

分类：
    成员内部类：声明在外部类内部
        > 使用static修饰：静态成员内部类
            class Person {
                static class Dog {
                    private String name;
                    public String getName() {
                        return name;
                    }
                }

            }
            public class PersonTest {
                public static void main(String[] args) {
                    Person.Dog d = new Person.Dog("泰迪");
                    System.out.println(d.getName());
                }
            }
        > 不使用static修饰：非静态成员内部类
            class Person {
                static class Bird {
                    private String name;
                    public String getName() {
                        return name;
                    }
                }

            }
            public class PersonTest {
                public static void main(String[] args) {
                    Person p1 = new Person()
                    Person.Bird b = p1.new Bird("黄鹂鸟");
                    System.out.println(b.getName());
                }
            }
    局部内部类：声明在方法，构造器，代码块中
        > 匿名的局部内部类
        > 非匿名的局部内部类

知识点
    > 成员内部类的理解
        > 从类的角度看
            > 可声明属性、方法、构造器、代码块等
            > 可以被声明父类，可以实现接口
            > 可以使用final修饰
            > 可以是抽象类，用abstract修饰
        > 从外部类成员的角度看
            > 内部可以调用外部类的结构
            > 可以用四种权限修饰
            > 可以是静态类：static修饰
    > 怎样创建成员内部类的实例
        > 使用static修饰：静态成员内部类
            class Person {
                static class Dog {
                    private String name;
                    public String getName() {
                        return name;
                    }
                }
            }
            public class PersonTest {
                public static void main(String[] args) {
                    Person.Dog d = new Person.Dog("泰迪");
                    System.out.println(d.getName());
                }
            }
        > 不使用static修饰：非静态成员内部类
            class Person {
                static class Bird {
                    private String name;
                    public String getName() {
                        return name;
                    }
                }
            }
            public class PersonTest {
                public static void main(String[] args) {
                    Person p1 = new Person()
                    Person.Bird b = p1.new Bird("黄鹂鸟");
                    System.out.println(b.getName());
                }
            }
    > 怎么在内部类中调用外部类的结构（属性、方法）
        Person.this.name
    > 局部内部类的使用
